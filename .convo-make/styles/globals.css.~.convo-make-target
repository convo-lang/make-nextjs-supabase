> define
__makeRoot="../.."
__makeFile="make.convo"
__makeOut="styles/globals.css"
__model="gpt-5"

> system
You are generating content that will be directly written to "styles/globals.css".
DO NOT include a preamble or postamble.

Always respond with the full content for "styles/globals.css", even if you are making an
small or incremental update.

> appendUser
<app-description>
## Task Bee

A minimal, light-hearted task manager for companies. Task Bee helps teams capture, organize, complete, and archive tasks, with rich markdown details and simple sharing.

### Overview
Task Bee enables signed-in users to manage their organization’s tasks in a multi-tenant setup. Tasks can include detailed markdown content with edit and preview modes, can be marked complete, archived, and exported as a markdown file. Account admins can manage account details and user roles, while all signed-in users gain access to dashboards and task detail pages.

## Features

- Task management
  - Add tasks
  - Remove tasks
  - Mark tasks as completed
  - Archive tasks
  - Download tasks as a markdown file
  - Store detailed task information in markdown format
    - Includes both edit and preview modes
  - Share a link to a task detail page

- Account and access
  - Multi-tenant accounts with role-based visibility and permissions
  - Invite users to an account via an invite link
  - View account info, logo, and ID
  - Admins can edit account info and manage member roles
  - View user profiles (self and public view)
  - Switch between accounts

## User Roles

- guest
  - A user not signed in
- default
  - Default role for a signed-in user belonging to an account
- manager
  - An account manager with elevated capabilities
- admin
  - A super admin that can manage any account and its users

## Screens

### Landing page
- Route: /
- Seen by roles: all
- Description: A marketing page for Task Bee with a large, eye-catching full-screen hero carousel highlighting the app’s top value propositions.

### Register
- Route: /register
- Seen by roles: all
- Description: Register a new user and create an organizational account. If already signed in, a message indicates the user is already registered.
- Inputs:
  - name
  - email
  - Organization name
  - password

### Sign-in
- Route: /sign-in
- Seen by roles: all
- Description: Sign in as an existing user. If already signed in, a message indicates the user is already signed in.
- Inputs:
  - email
  - password

### Dashboard
- Route: /dashboard
- Seen by roles: all signed-in users
- Description: The central place for managing tasks for the current company/account.
- Capabilities:
  - Add, remove tasks
  - Mark tasks as completed
  - Archive tasks
  - Download tasks as markdown

### Task Detail
- Route: /task/[task-id]
- Seen by roles: all signed-in users
- Description: A dedicated page to manage and view a single task.
- Capabilities:
  - View and edit task details in markdown
    - Toggle between edit and preview modes
  - Mark as completed
  - Archive task
  - Download this task as markdown
  - Share a link to this task

### Account
- Route: /account
- Seen by roles: all signed-in users
- Description: Shows account information and membership.
- Details:
  - Displays:
    - name
    - logo
    - id (muted)
  - Admin-only:
    - Edit account info
    - Invite users via invite link:
      - https://${location.host}/accept-account-invite/${inviteCode}
  - Users section:
    - Grid of user cards (name + profile picture), linking to each user’s public profile
  - Link to create a new account

### Accept Account Invite
- Route: /accept-account-invite/[invite-code]
- Seen by roles: all
- Description: Accept or decline an invite to join an account. If not signed in, users are prompted to sign in first.

### Profile
- Route: /profile
- Seen by roles: all signed-in users
- Description: The private profile page for the current user.
- Capabilities:
  - View personal info
  - View all accounts the user belongs to, with option to switch accounts
  - Edit profile fields, except email address (not editable)

### Public Profile
- Route: /profile/[user-id]
- Seen by roles: all signed-in users
- Description: Public-facing profile page as seen by other users within the account context.
- Admin functionality:
  - Admins can see the user’s role
  - Admins can change the user’s role
  - Admins cannot change their own role

## Task Model and Behaviors

- A task contains:
  - Title and status (active, completed, archived)
  - Detailed description in markdown
  - Metadata related to its account
- Actions:
  - Edit details in markdown with a live preview mode
  - Mark complete for workflow visibility
  - Archive to keep the dashboard focused while retaining historical context
  - Export/download as a markdown file for offline sharing or documentation
  - Share link to the task detail page with teammates

## Styling

- Framework: Tailwind CSS
- Look and feel:
  - Minimalistic
  - Light-hearted
  - Good use of negative space
  - Gradient backgrounds
  - Rounded corners and surfaces
- Custom color palette:
  - CSS variables:
    - --light-blue: #a8d5e2ff
    - --orange-web: #f9a620ff (Brand color)
    - --mustard: #ffd449ff
    - --forest-green: #548c2fff (Secondary)
    - --pakistan-green: #104911ff
- Brand usage rules:
  - Use the brand color (#f9a620ff) sparingly
  - Reserve the brand color primarily for the most important CTAs or as a subtle thin border for highlights when not a main CTA

## Summary

Task Bee streamlines task tracking for companies with a clear, role-aware experience. Users can collaborate on tasks, enrich them with markdown detail, and maintain clean dashboards by completing and archiving items. Admins manage their accounts and memberships, while a thoughtful, minimal visual style ensures focus and clarity.
</app-description>

> appendUser
<coding-rules>
## Tech Stack
- ReactJS
- NextJS - pages directory and static site generation
- Tailwinds v4
- lucide-react - icons
- Supabase

## Layout
It is preferred to use stacking layouts using flex-box columns to avoid running out of horizontal
room. Avoid long names in buttons and prefer to use icons for buttons.

If buttons display text DO NOT give the button a static width.

## Static site generation
The frontend of the app uses static site generation so no server side rendering should be used. All
pages are stored in the pages directory and the NextJS app router is NOT used.

## Exports
Always use named exports unless explicitly told otherwise or required such as when creating NextJS
pages.

## Multi-tenet Database
The database is a multi-tenet database where the `account` table represents each tenet. All entities
that belong to or fall under an account should have an `account_id` property directly linking the
entity to an account. Entities that can belong to multiple accounts should use a join table to
link to an account. 

The `user` table is linked to the `account` table through the `account_membership` table.


## Required Entities
The following entities must be represented in the database schema. Additional properties or values
can be added to the entities

### User
Represents a signed-in user

Table name: user
Required Properties:
- id: uuid
- created_at: timestamptz
- name: text
- email: text
- profile_image_path?: text - path of profile picture in the accounts bucket
- hero_image_path?: text

### Account
Represents a company or organization

Table name: account
Required Properties:
- id: uuid
- created_at: timestamptz
- name: text
- logo_image_path?: text - path of profile picture in the accounts bucket
- hero_image_path?: text

### AccountMembership
Links a User to an Account

Table name: account_membership
Required Properties:
- id: uuid
- created_at: timestamptz
- last_accessed_at: timestamptz
- user_id: uuid
- account_id: uuid
- role: UserRole

### UserRole
An enumeration of different role types.
- admin: The admin of an account
- guest: A guest in an account
Enum name: user_role



## Schema Utility Types
The `@/lib/schema` import contains types and objects that map to the database schema.

`@/lib/schema` exports the following:
- typeDefs: An object of type `Record<string,TypeDef>` containing key value pairs for each table in the database.
- {type_name}: An interface that represents the structure of a value in a table.
- {type_name}_insert: An interface that represents the structure of a value to be inserted in the a table.
- {type_name}Schema: A Zod schema that represents the structure of a value in a table.
- {type_name}_insertSchema: A Zod schema that represents the structure of a value to be inserted in the a table.
- TypeDef: An interface that represents a type
- PropDef: An interface the represents a property of a type
- TypeMapping: An interface that maps type names to various programming languages.


Example:
``` ts
import { User, User_insert, UserSchema, User_insertSchema, typeDefs } from "@/lib/schema";

let user:User;
UserSchema.parse(user);

let newUser:User_insert;
User_insertSchema.parse(newUser);

const userPrimaryKey=typeDefs.primaryKey;
```

Schema Utility Interfaces:
``` ts
export interface TypeMapping
{
    name:string;
    ts?:string;
    zod?:string;
    convo?:string;
    sql?:string;
}

export interface PropDef
{
    name:string;
    type:TypeMapping;
    primary?:boolean;
    description?:string;
    sqlDef?:string;
    optional?:boolean;
    hasDefault?:boolean;
    isArray?:boolean;
    arrayDimensions?:number;
}

export interface TypeDef<
    TValue extends Record<string,any>=Record<string,any>,
    TInsert extends Record<string,any>=Record<string,any>
\>{


    name:string;
    description?:string;
    type:'type'|'enum';
    primaryKey:(keyof TValue) & (keyof TInsert);
    sqlTable?:string;
    sqlSchema?:string;
    zodSchema?:ZodType;
    zodInsertSchema?:ZodType;
    props:PropDef[];
}
```

## Supabase client
The `supClient` function imported from "@/lib/supabase" can be used to access an instance of a
Supabase client.

Supabase Client Example:
``` ts
import { supClient } from "@/lib/supabase";

async function signInExampleAsync(){
    const signInResult=await supClient().auth.signInWithPassword({email,password});
}
```

## File Storage
File should be stored using supabase storage using the `accounts` bucket and use the following pattern for paths.

File path pattern: `{account_id}/users/{user_id}/{REST_OF_PATH}`

Example file path for:
- account_id: 809f36d5-8549-417e-b89c-7f1cb129b4dc
- user_id: fe691ceb-ba31-421e-9a51-7fb1207965e8
- file_name: example-book.pdf

Upload Path: `809f36d5-8549-417e-b89c-7f1cb129b4dc/users/fe691ceb-ba31-421e-9a51-7fb1207965e8/example-book.pdf`

### Storing file path in Database
When storing file paths in the database only path of uploaded files should be store, the full URL
will be generated client side using either the `fileStore()` service imported from `@/lib/fileStore`
or using the `useFileUrl` hook imported from `@/lib/hooks`.

Example of getting full URL for user profile picture using the `fileStore()` service:
``` ts
import { fileStore } from "@/lib/fileStore";
import { User } from "@/lib/schema";

async function exampleFunction(user:User){
    if(!user.profile_image_path){
        return;
    }
    const profilePictureUrl=await fileStore().getUrlAsync(user.profile_image_path);
}
```

Example of getting full URL for user profile picture using the `useFileUrl` hook:
``` tsx
import { useFileUrl } from "@/lib/hooks";
import { User } from "@/lib/schema";

function ExampleComponent({user}:{user:User}){
    const profilePictureUrl=useFileUrl(user.profile_image_path);
    return (
        <div>
            {profilePictureUrl===null?
                'loading'
            :profilePictureUrl===undefined
                'No profile picture'
            :
                <img src={profilePictureUrl}/>
            }
        </div>
    )
}
```

fileStore API:
``` ts
/**
 * Utility class for Supabase storage operations. By default the FileStore class uses the `accounts`
 * bucket.
 */
export class FileStore
{
    /**
     * Gets the full URL for a given path. When needed signed URLs will be created. The result of the
     * function will be cached and future calls for the same path will returned immediately
     */
    public async getUrlAsync(path:string):Promise<string|undefined>;

    /**
     * Attempts to get the cached URL for the path. If a URL has not been cached for the path
     * undefined will be returned.
     */
    public getCachedUrl(path:string):string|undefined;
}
```

useFileUrl API
``` ts
/**
 * Gets the full URL to a given path
 * Return values:
 * null: URL info is being loaded
 * undefined: URL not available
 * {string}: The full URL of the path
 * @param path The path to get a URL for. If null or undefined then undefined is returned.
 */
export const useFileUrl=(path:string|null|undefined):string|null|undefined=>;
```



## CRUD
Common CRUD operations can be handled using the `store()` service imported from `@/lib/store`
or the `useStore*()` React hooks imported from `@/lib/hooks`.

Store service example:
``` ts
import { store } from "@/lib/store";
import { typeDefs } from "@/lib/schema";

const user=await store().selectFirstMatchesAsync(typeDefs.User,{email:'example@example.com'})
```

Use store hook example:
``` ts
import { useFirstMatchingStoreItem } from "@/lib/hooks";
import { typeDefs } from "@/lib/schema";

function ExampleComponent()
{
    const user=useFirstMatchingStoreItem(typeDefs.User,{email:'example@example.com'});
}
```

### Store service API

``` ts

export class Store
{

    /**
     * Gets an item from a table by table name and id. Undefined is returned if no item exists
     * in the table with the given id.
     * @param table Name of table to get item from
     * @param id Id of item to get
     */
    public async selectFirstAsync<T extends Record<string,any>>(table:string|TypeDef<T>,id:string):Promise<T|undefined>;

    /**
     * Selects all matching items from the given table
     * @param table Name of table to select from
     * @param match An object with properties to match against
     * @param options Options used to control selection
     */
    public async selectMatchesAsync<T extends Record<string,any>>(table:string|TypeDef<T>,match:Partial<T>,options?:SelectOptions):Promise<Record<string,any>[]>;

    /**
     * Selects the first matching item form the given table
     * @param table Table to select from
     * @param match An object with properties to match against
     */
    public async selectFirstMatchesAsync<T extends Record<string,any>>(table:string|TypeDef<T>,match:Partial<T>):Promise<Record<string,any>|undefined>;

    /**
     * Updates an item value in a table by id.
     * @param table Name of table to set the item in.
     * @param id Id of the item to set
     * @param value Value of the item to set
     * @returns The value passed to the setItem function
     */
    public async insertAsync<T extends Record<string,any>>(table:string|TypeDef<Record<string,any>,T>,value:T):Promise<T>;
    
    /**
     * Updates an item value in a table by id.
     * @param table Name of table to set the item in.
     * @param id Id of the item to set
     * @param value Value of the item to set
     * @returns The value passed to the setItem function
     */
    public async updateAsync<T extends Record<string,any>>(table:string|TypeDef<T>,id:string,value:Partial<T>):Promise<T>;
    
    /**
     * Deletes an item from a table
     * @param table The name of the table to delete the item from
     * @param id The Id of the item to delete
     * @returns The value of the item before being delete or undefined
     */
    public async deleteAsync<T extends Record<string,any>>(table:string|TypeDef<T>,id:string):Promise<T|undefined>;
}
```

### Store hooks
The store hooks also have the added benefit of automatically receiving updates when changes are made
by the `store()` service.

``` ts

export interface UseStoreItemOptions
{
    /**
     * If true useStoreItem will return undefined
     */
    disabled?:boolean;

    /**
     * If true the value will be reset to null when disabled. By default the last loaded
     * value will be returned when disabled.
     */
    resetOnDisabled?:boolean;

    /**
     * If true the value will be reset to null when table or id changes. By default the last loaded
     * value will be returned until the new value is loaded.
     */
    resetOnChange?:boolean;
}

export type UseStoreItemsOptions = UseStoreItemOptions & SelectOptions;

/**
 * Returns an item by id from a given table. Any updates made to the item elsewhere in the app
 * will cause useStoreItem to return the new value.
 *
 * Undefined is returned if the value does not exist in the table and null is returned while
 * the item is being loaded.
 *
 * @param table Name of table to get item from. If null or undefined useStoreItem will return undefined
 * @param id Id of item to get from table. If null or undefined useStoreItem will return undefined
 * @param options Additional options
 */
export const useStoreItem=<T extends Record<string,any>=Record<string,any>>(
    table:TypeDef<T,any>|string|null|undefined,
    id:string|null|undefined,
    options?:UseStoreItemOptions
):T|null|undefined=>;

/**
 * Returns all matching items
 *
 * null is returned while the items are loading.
 *
 * @param table Name of table to get item from. If null or undefined useStoreItem will return undefined
 * @param id Id of item to get from table. If null or undefined useStoreItem will return undefined
 * @param options Additional options
 */
export const useStoreMatchingItems=<T extends Record<string,any>=Record<string,any>>(
    table:TypeDef<T>|string|null|undefined,
    match:Partial<T>|null|undefined,
    options?:UseStoreItemsOptions
):T[]|null=>;


/**
 * Returns all matching items
 *
 * Undefined is returned if the value does not exist in the table and null is returned while
 * the item is being loaded.
 *
 * @param table Name of table to get item from. If null or undefined useStoreItem will return undefined
 * @param id Id of item to get from table. If null or undefined useStoreItem will return undefined
 * @param options Additional options
 */
export const useStoreFirstMatchingItem=<T extends Record<string,any>=Record<string,any>>(
    table:TypeDef<T>|string|null|undefined,
    match:Partial<T>|null|undefined,
    options?:UseStoreItemsOptions
):T|null|undefined=>;

```

## Full screen screens
The `useFullPage` hook can be used to display a full screen page without the main navigation bar.

example:
``` tsx
import { useFullPage } from "@/lib/hooks";

function ExampleComponent(){

    useFullPage();

    return (
        <div></div>
    )
}
```

## Form Data
When creating forms store form data in a typed useState variable.

Zod schemas can be imported from `@/lib/schema` to validate types stored in the database.

Form state example:
``` tsx

interface NewsletterForm
{
    name:string
    email:string;
}
function ExampleComponent()
{
    const [newsletterData,setNewsletterData]=useState<NewsletterForm>({
        name:'',
        email:'',
    });

    return (
        <form>
            <input
                placeholder="Enter name"
                value={newsletterData.name}
                onChange={e=>setNewsletterData({...newsletterData,name:e.target.value})}
            />
            <input
                placeholder="Enter email"
                value={newsletterData.email}
                onChange={e=>setNewsletterData({...newsletterData,email:e.target.value})}
            />
        </form>
    )
}
```

## Pages
When creating NextJS pages export the page component as a default function with the function
name reflecting the name of the page.

Do not use the MainLayout component when creating a page. The Main Layout component will be
used by the top level App component.

Include the name of the page in the className of the root element of the page component using the
format of: "page--{PageComponentName}"

Example Page with a route of "/example":
``` tsx

export default function ExamplePage(){

    return (
        <div className="page--ExamplePage">
            Example page content
        <div>
    )
}
```

## Main Layout
The `MainLayout` component is used by the top level `App` component to render the main layout of the
app. By default the MainLayout should render pages in a centered column with a navigation bar.

### Main Layout Display modes
Pages can use the `useFullPage` and `useNoMargins` hooks to alter the way the page is displayed.
Implement display modes using css or class names, DO NOT change the render order or do anything
that would cause the page to be unmounted.

### Main Layout Fullscreen Mode
Pages can request to enter into fullscreen. Use the `useIsInFullPageMode` hook imported from 
`@/lib/hooks` to check if the page should be displayed in fullscreen mode. If useIsInFullPageMode
returns true hide the main navigation and any other UI other than the page content.

### Main Layout No Margins Mode
Pages can request to remove all page margins so that they can display content edge to edge. Use
the `useIsNoMarginMode` hook imported from `@/lib/hooks` to check if the page should be displayed
in no margins mode.


## Packages
This is the package.json file for the project. You can only use libraries based on the dependencies
of the package.json file.

``` json
{
  "dependencies": {
    "lucide-react": "^0.544.0",
    "markdown-it": "^14.1.0",
    "next": "15.5.4",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "rxjs": "^7.8.2",
    "uuid": "^13.0.0",
    "zod": "^4.1.11",
    "supabase": "^2.33.9",
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


```

## Standard Components
The following components can be used

### Logo
Displays the apps logo using an SVG

Import: `import { Logo } from "@/components/Logo";`
Props:
``` ts
interface LogoProps
{
    color?:string;
    /**
     * @default "w-8 h-8"
     */ 
    className?:string;
    size?:string|number;
}
```

### SignInRequired
A card to display when a user does not have access to a screen with links to sign-in or register.
Import: `import { Logo } from "@/components/SignInRequired";`
Props:
``` ts
interface SignInRequiredProps
{

    /**
     * A message to display to the user
     */
    message?:string;
    className?:string;
}
```


## User Registration

When registering a new user store the user's name and account name in options.data object
of the user sign-up options:
``` ts
await supClient().auth.signUp({
    email: form.email.trim(),
    password: form.password,
    options: {
        data: { name: form.name, accountName:form.accountName },
    },
});
```

When registering a new user do not explicitly insert any values into the database.
User and account setup will be handled by the backend.


## Utility Functions
The following utility functions can be imported from `@/lib/util`

``` ts
export type ClassNameValue = string | false | number | null | undefined | {
    [className: string]: any;
} | ClassNameValue[];

/**
 * Combines class names and ignores falsy values.
 */
export const cn=(...classNames:ClassNameValue[]):string=>;
```


## Hooks
React components can use the following hooks imported from `@/lib/hooks`

``` ts
/**
 * Hides common UI controls such as the main nav bar.
 * @param enabled If false the hook is disabled
 */
export const useFullPage=(enabled=true)=>;

/**
 * Removes all margins and paddings from the main layout while keeping the main navigation and
 * other shared UI elements
 * @param enabled If false the hook is disabled
 */
export const useNoMargins=(enabled=true)=>;

/**
 * Returns true if the page should be displayed in full screen
 */
export const useIsInFullPageMode=():boolean=>{
    const count=useSubject(fullPageSubject);
    return count>0;
}

/**
 * Returns true if the page should remove all margins
 */
export const useIsNoMarginMode=():boolean=>;

/**
 * Returns the current signed-in user.
 * null === user is being loaded
 * undefined === user is not signed in
 */
export const useCurrentUser=():User|null|undefined=>;

/**
 * Returns the current account the user is signed into.
 * null === account is being loaded
 * undefined === No account found for user
 */
export const useAccount=():Account|null|undefined=>;

/**
 * Returns the role of the user in the current account.
 * null === role is being loaded
 * undefined === No role found for user
 */
export const useUserRole=():UserRole|null|undefined=>;

/**
 * Returns the information about the current user, including a user object, account object
 * and the role the user has for the account.
 * null === user info is being loaded
 * undefined === user is not signed in
 */
export const useUserInfo=():UserInfo|null|undefined=>;
```

## Utility types
The following utility types can be imported from `@/lib/types-util`

``` ts
export interface UserInfo
{
    user:User;
    role?:UserRole;
    membership?:AccountMembership;
    account?:Account;
}

/**
 * Options used with select queries
 */
export interface SelectOptions
{
    offset?:number;
    limit?:number;
    orderBy?:string;
    /**
     * If true return items will be ordered in descending order
     */
    orderByDesc?:boolean;
}
```

## App Controller
The App Controller can be accessed by calling the `app` function imported from `@/lib/app`.

Use can use the App Controller to switch between accounts
``` ts
import { app } from `@/lib/app`

async function switchAccountExample(accountId:string){
    await app().switchAccountAsync(accountId);
}
```
</coding-rules>

> appendUser
<styling>
## Styling Framework
Use Tailwinds for styling

## Look and Feel
- minimalistic
- light hearted
- good use of negative space
- gradient backgrounds
- rounded

## Custom Color Palette
``` css
:root{
    --light-blue: #a8d5e2ff;
    --orange-web: #f9a620ff;
    --mustard: #ffd449ff;
    --forest-green: #548c2fff;
    --pakistan-green: #104911ff;
}
```

Brand color: #f9a620ff (--orange-web)
Secondary color: #548c2fff (--forest-green)


## Rules
Use the brand color sparingly. The brand color should only use as a background for the most important elements.
The brand color can be used as a thin border color in situations where an element should be highlighted
but is not a main CTA.
</styling>

> appendUser
<tailwind-rules>
# Tailwind
Always be sure to use Tailwind v4 syntax

## Top level imports
The top of the globals.css file should be formatted as the following:
``` css
@import url("https://fonts.googleapis.com/css2?{QUEREY_PARAMS_HERE}");
@import "tailwindcss";
@plugin "@tailwindcss/typography";
```

Additional plugins may be added after the `@tailwindcss/typography` plugin.

## Utility classes
Tailwind utility classes must be defined using `@utility` directive instead of the older v3 method
of using `@layer utility`. Any class used in an `@apply` directive must be defined as a utility
class, classed defined in `@layer components` can not be used in the `@apply` directive.

Utility classes can not use Pseudo-class or Pseudo-element selectors. Pseudo selectors should be
apply in the class name of the element using the utility class or in the components applying the
utility

Example of how NOT to use pseudo classes and pseudo elements with utility classes selectors:
<bad-examples>
@utility input-base:hover{
    outline:1px solid var(--color-brand);
}
@utility input-base::placeholder{
    color:var(--muted);
}
</bad-examples>

Example of how to use pseudo classes and pseudo elements with utility classes selectors:
<good-examples>
@utility input-base-hover{
    outline:1px solid var(--color-brand);
}
@utility input-base-placeholder{
    color:var(--muted);
}

@layer components{
    .input:hover{
        @apply input-base-hover;
    }
    .input::placeholder{
        @apply input-base-placeholder;
    }
}
</good-examples>

## Components
If a component has multiple variants with shared styles define a "base" utility class to apply to
the variants.

Utility and component class example:
``` css
@utility btn-base{
    border:1px solid var(--border-color);
}

@layer components{
    .btn{
        @apply btn-base;
    }
}
```
</tailwind-rules>

> appendUser
<editor-config>
root = true

[*]
indent_style = space
indent_size = 4
</editor-config>

> appendUser
Generate a Tailwinds v4 theme.

> nop
//_END_MAKE_TARGET_INPUT_


@time 2025-10-27T06:35:41-04:00
@tokenUsage 6758 / 6177 / $0.016168750000000003
@model gpt-5-2025-08-07
> assistant
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Nunito:wght@400;600;700;800&display=swap");
@import "tailwindcss";
@plugin "@tailwindcss/typography";

/* CSS Variables - Brand Palette */
:root{
    --light-blue:#a8d5e2ff;
    --orange-web:#f9a620ff; /* Brand */
    --mustard:#ffd449ff;
    --forest-green:#548c2fff; /* Secondary */
    --pakistan-green:#104911ff;
}

/* Tailwind v4 Theme Tokens */
@theme {
    --font-sans:"Inter",ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji";
    --font-nunito:"Nunito",var(--font-sans);

    --color-brand:var(--orange-web);
    --color-secondary:var(--forest-green);
    --color-accent:var(--mustard);
    --color-info:var(--light-blue);

    --color-bg:#f8fafc;
    --color-surface:#ffffff;
    --color-fg:#0b1220;
    --color-muted:#6b7280;

    --radius-xs:6px;
    --radius-sm:10px;
    --radius:12px;
    --radius-lg:16px;
    --radius-xl:22px;

    --shadow-soft:0 1px 2px rgba(16,17,19,.04), 0 6px 22px rgba(16,17,19,.06);
    --shadow-pop:0 10px 30px rgba(16,17,19,.12);
}

/* Base resets and globals */
html,body,#__next{height:100%;}
html{scroll-behavior:smooth;}
body{
    font-family:var(--font-sans);
    color:var(--color-fg);
    background:
        radial-gradient(1200px 600px at 10% -10%, color(display-p3 0.98 0.98 0.98 / .9), transparent 60%),
        radial-gradient(900px 480px at 110% -20%, color(display-p3 0.89 0.97 0.98 / .7), transparent 50%),
        linear-gradient(to bottom, #ffffff, #f9fbfd 60%, #f1f8fb);
    background-color:var(--color-bg);
}
::selection{
    background:color-mix(in oklab, var(--orange-web) 22%, white);
    color:#0b1220;
}

/* Typography tweaks */
h1,h2,h3,h4{
    font-family:var(--font-nunito);
    letter-spacing:-0.01em;
}
h1,h2{text-wrap:balance;}
p,li{text-wrap:pretty;}

/* Scrollbar - light touch */
*{
    scrollbar-color: color-mix(in oklab, var(--forest-green) 18%, #e6eaf0) transparent;
    scrollbar-width: thin;
}

/* === Utilities (Tailwind v4 @utility) === */

/* Layout containers */
@utility app-container{
    @apply mx-auto max-w-7xl px-4 sm:px-6 lg:px-8;
}
@utility page-stack{
    @apply flex flex-col gap-6;
}
@utility section-pad{
    @apply py-6 md:py-10;
}
@utility full-bleed{
    @apply w-full mx-auto max-w-none;
}

/* Surfaces and cards */
@utility surface{
    @apply rounded-2xl bg-white/80 backdrop-blur border border-black/5 shadow-sm;
}
@utility surface-gradient{
    @apply bg-gradient-to-b from-white/90 to-white/70;
}
@utility card{
    @apply surface p-4 md:p-6;
}

/* Subtle brand highlight (thin border only) */
@utility brand-border-thin{
    @apply border;
    border-color:color-mix(in oklab, var(--orange-web) 38%, #e5e7eb);
}

/* Buttons */
@utility btn-base{
    @apply inline-flex items-center justify-center gap-2 select-none rounded-xl px-3.5 py-2.5 text-sm font-medium tracking-tight transition;
    @apply border border-zinc-200 bg-white/80 shadow-sm;
}
@utility btn-primary-base{
    @apply text-white;
    background: linear-gradient(180deg, color-mix(in oklab, var(--orange-web) 96%, white) 0%, var(--orange-web) 60%, color-mix(in oklab, var(--orange-web) 86%, black) 100%);
    box-shadow: var(--shadow-soft);
}
@utility btn-secondary-base{
    @apply text-zinc-900 bg-white border-zinc-200;
}
@utility btn-ghost-base{
    @apply bg-transparent border-transparent text-zinc-800;
}

/* Inputs */
@utility input-base{
    @apply w-full rounded-xl border border-zinc-200 bg-white/80 px-3.5 py-2.5 text-sm text-zinc-900 shadow-sm outline-none transition;
}
@utility input-focus-ring{
    @apply ring-4 ring-[color:var(--orange-web)]/15 border-[color:var(--orange-web)]/60;
}
@utility input-invalid{
    @apply border-red-400 ring-2 ring-red-200;
}
@utility input-placeholder{
    @apply text-zinc-400;
}

/* Badges / chips */
@utility badge-base{
    @apply inline-flex items-center gap-1 rounded-full border px-2.5 py-1 text-xs font-medium;
}
@utility badge-muted{
    @apply badge-base border-zinc-200 bg-zinc-50 text-zinc-700;
}
@utility badge-success{
    @apply badge-base;
    color: #0f5132;
    background: color-mix(in oklab, var(--forest-green) 12%, white);
    border-color: color-mix(in oklab, var(--forest-green) 18%, white);
}

/* Avatars */
@utility avatar{
    @apply inline-flex items-center justify-center rounded-full bg-zinc-100 text-zinc-500;
}

/* App background options */
@utility bg-app{
    @apply bg-gradient-to-b from-white via-[#fdfaf5] to-[#f1f9fb];
}
@utility bg-surface-soft{
    background:
        linear-gradient(180deg, rgba(255,255,255,.92), rgba(255,255,255,.8)),
        radial-gradient(600px 200px at 0% -10%, color(display-p3 0.98 0.92 0.86 / .4), transparent 60%);
}

/* Links */
@utility link{
    @apply underline-offset-4 decoration-1 transition;
    color: var(--forest-green);
}

/* KBD */
@utility kbd-base{
    @apply rounded-md border border-zinc-200 bg-white px-1.5 py-0.5 text-[11px] font-semibold text-zinc-700 shadow-sm;
}

/* Divider */
@utility divider{
    @apply h-px w-full bg-gradient-to-r from-transparent via-zinc-200 to-transparent;
}

/* CTA ring highlight (non-CTA elements) */
@utility brand-ring{
    @apply ring-2 ring-[color:var(--orange-web)]/40;
}

/* === Components === */
@layer components{
    /* Buttons */
    .btn{ @apply btn-base; }
    .btn:hover{ @apply bg-white; }
    .btn:active{ @apply scale-[0.995]; }
    .btn:focus-visible{ @apply outline-none ring-4 ring-[color:var(--orange-web)]/20; }

    .btn-primary{ @apply btn-base btn-primary-base; }
    .btn-primary:hover{
        filter: brightness(0.98);
        box-shadow: var(--shadow-pop);
    }
    .btn-primary:active{ @apply scale-[0.992]; }

    .btn-secondary{ @apply btn-secondary-base; }
    .btn-secondary:hover{ @apply bg-zinc-50; }

    .btn-ghost{ @apply btn-ghost-base; }
    .btn-ghost:hover{ @apply bg-zinc-50 border-zinc-200; }

    .btn-icon{
        @apply inline-flex items-center justify-center rounded-xl border border-zinc-200 bg-white/80 p-2 shadow-sm transition;
    }
    .btn-icon:hover{ @apply bg-white; }

    .btn-disabled,
    .btn:disabled{
        @apply opacity-60 pointer-events-none;
    }

    /* Inputs */
    .input{ @apply input-base; }
    .input:focus{ @apply input-focus-ring; }
    .input[aria-invalid="true"], .input.invalid{ @apply input-invalid; }
    .input::placeholder{ @apply input-placeholder; }

    .textarea{ @apply input-base align-top; }
    .textarea:focus{ @apply input-focus-ring; }
    .textarea::placeholder{ @apply input-placeholder; }

    .select{
        @apply input-base appearance-none bg-[url("data:image/svg+xml,%3Csvg width='12' height='8' viewBox='0 0 12 8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1.5L6 6.5L11 1.5' stroke='%236b7280' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E")] bg-[length:12px_8px] bg-[right_0.8rem_center] bg-no-repeat pr-9;
    }
    .select:focus{ @apply input-focus-ring; }

    /* Cards / Surfaces */
    .card{ @apply card; }
    .card--hover{
        @apply card transition;
    }
    .card--hover:hover{
        transform: translateY(-1px);
        box-shadow: var(--shadow-pop);
        @apply surface-gradient;
    }

    /* Link */
    .link{
        @apply link;
    }
    .link:hover{
        color: color-mix(in oklab, var(--forest-green) 86%, black);
        text-decoration: underline;
    }
    .link--muted{
        @apply text-zinc-600;
    }
    .link--brand{
        color: var(--orange-web);
    }

    /* Badge */
    .badge{ @apply badge-muted; }
    .badge--success{ @apply badge-success; }

    /* KBD */
    kbd{ @apply kbd-base; }

    /* Divider */
    .divider{ @apply divider; }

    /* Page shell helpers */
    .page-container{ @apply app-container page-stack section-pad; }
    .page--no-margins .page-container{ @apply px-0 py-0; }
    .page--full{ @apply min-h-[calc(100vh-4rem)] flex flex-col; }

    /* Prose for Markdown content */
    .markdown{
        @apply prose prose-zinc max-w-none;
    }
    .markdown :is(h1,h2,h3){
        font-family: var(--font-nunito);
    }
    .markdown a{
        color: var(--forest-green);
        text-decoration-thickness: 1px;
        text-underline-offset: 4px;
    }
    .markdown a:hover{
        color: color-mix(in oklab, var(--forest-green) 86%, black);
        text-decoration: underline;
    }
    .markdown code{
        @apply rounded-md bg-zinc-100 px-1.5 py-0.5 text-[0.9em] font-medium;
    }
    .markdown pre code{
        @apply bg-transparent p-0;
    }
    .markdown pre{
        @apply rounded-xl border border-zinc-200 bg-zinc-50 p-4 shadow-sm;
    }
    .markdown blockquote{
        @apply border-l-4 border-[color:var(--forest-green)]/30 bg-[color:var(--forest-green)]/3 px-4 py-2 italic;
    }

    /* Subtle highlight frame using brand (non-primary) */
    .brand-frame{
        @apply rounded-xl bg-white/80 shadow-sm;
        border:1px solid color-mix(in oklab, var(--orange-web) 40%, #e5e7eb);
    }
}

/* Print-friendly markdown export */
@media print{
    body{
        background:#fff !important;
    }
    .no-print{ display:none !important; }
    .markdown{
        @apply prose prose-zinc max-w-none;
    }
}



> user
